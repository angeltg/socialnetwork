'use strict';

const express = require('express');
const bodyParser = require('body-parser');
const routes = require('./routes');

const httpServerConfig = require('../config/http-server-config'); // La ruta y el puerto de conexion es una variable por eso se crea este m칩dulo


const app = express();
let server = null;
app.use(bodyParser.json()); // Se le a침ade un midleware para que acepte datos en modo json

/**
 * Enable CORS with a origin whitelist of valid domains
 * Step 1: Add CORS
 */

app.use((req, res, next) => {
  const accessControlAllowMethods = [
    // fill the methods
    'GET', 'POST', 'OPTIONS', 'PUT', 'DELETE'
  ];

  const accessControlAllowHeaders = [
    // fill the headers
    'Authorization', 'Origin', 'X-Request-With', 'Content-Type', 'Accept', 'Access-Control-Allow-Request-Method', 'x-market'
  ];

  res.header('Access-Control-Allow-Origin', 'http://localhost:' + httpServerConfig.port);
  // res.setHeader('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Credentials', 'true');
  // Access-Control-Allow-Methods: put accessControlAllowHeaders separated by comma
  res.header('Access-Control-Allow-Methods', accessControlAllowMethods.join(','));
  // put accessControlAllowHeaders separated by comma
  res.header('Access-Control-Allow-Headers', accessControlAllowHeaders.join(','));
  next();
});

/**
 * Add all routes
 */
app.use('/api', routes.accountRouter);
app.use('/api', routes.userRouter);
app.use('/api', routes.postRouter);

app.use('*', (req, res, next) => {
  return res.status(404).send({

    message: 'La p치gina no se encuentra',
  });
});


/**
 * Special route middleware to catch all next(err) generated by controllers
 */
// Es un middleware para gestionar errores. Siempre con 4 par치metros. Por eso sabe node que es un gestor de errores, ya que tiene err.
app.use((err, req, res, next) => {
  console.error('Error 500', err);
  return res.status(500).json({
    message: err.message,
  });
});

/**
 * Start listening requests at a given port
 * @param {Number} port
 */ //patron singleton patterns functions
async function listen(port) {
  if (server === null) {
    server = await app.listen(port);
  } else {
    console.error("Can't listen, server already initialized");
  }
}

/**
 * Stop listening requests
 */
async function close() {
  if (server) {
    await server.close();
    server = null;
  } else {
    console.error("Can't close a non started server");
  }
}

module.exports = {
  listen,
  close,
};
